{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","phone","age","work","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","scrollbarColor","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","Response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAmBeA,EAjBF,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,KAAiBC,GAAiB,EAA5BC,IAA4B,EAAvBC,KAAuB,EAAjBF,OAAOG,EAAU,EAAVA,MAEvC,OACI,sBAAKC,UAAU,+CAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BR,GAAMM,UAAU,aAClE,gCACI,oBAAIA,UAAU,KAAd,SAAoBL,IAGpB,oBAAGK,UAAU,SAAb,UAAsB,wCAAeJ,KACrC,oBAAGI,UAAU,SAAb,UAAsB,wCAAeD,YCkBtCI,EAxBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGhB,OACI,qBAAKJ,UAAY,MAAjB,SAEQI,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIb,GAAIU,EAAOG,GAAGb,GACdC,KAAMS,EAAOG,GAAGZ,KAChBE,IAAKO,EAAOG,GAAGV,IACfC,KAAMM,EAAOG,GAAGT,KAChBF,MAAOQ,EAAOG,GAAGX,MACjBG,MAAOK,EAAOG,GAAGR,OANZQ,SCDlBC,EAZG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACG,uBACAA,UAAU,uCACVU,KAAO,SACPC,YAAc,gBACdC,SAAYH,OCERI,G,MARA,SAACC,GACZ,OACI,qBAAKd,UAAU,SAASe,MAAO,CAACC,UAAW,SAAUC,OAAQ,QAASC,eAAgB,SAAtF,SACKJ,EAAMK,aCqBJC,E,kDAxBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAI7B,IAAGG,KAAKJ,MAAMC,SAIV,OAAOG,KAAKX,MAAMK,a,GAlBCQ,aCoDZC,G,wDA5CX,aAAc,IAAD,8BACT,gBAcLC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAJR,E,gEAQO,IAAD,OACfG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAQrC,IAAD,EACyBb,KAAKJ,MAA3BjB,EADH,EACGA,OAAO2B,EADV,EACUA,YACRQ,EAAenC,EAAOoC,QAAO,SAAAC,GAC/B,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAE5D,OAAQtC,EAAOwC,OAGR,sBAAM5C,UAAW,KAAjB,UACI,oBAAIA,UAAW,KAAf,qBACA,cAAC,EAAD,CAAWS,aAAgBgB,KAAKI,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAUmC,WAPrC,oBAAIvC,UAAU,SAAd,2B,GA1BW2B,cCGHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAEA,cAAC,EAAD,MAGAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.78154845.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, age, work, phone, email}) =>{\r\n  \r\n    return(\r\n        <div className=\" bg-light-blue dib br3 ma2 grow bw3 shadow-5\">\r\n            <img alt='friends' src = {`https://robohash.org/${id}`} className=' mw5 dim' />\r\n            <div>\r\n                <h2 className=\"tc\">{name}</h2>\r\n                {/* <p className=\"tl pl3\"><b>age:</b>  {age}</p>\r\n                <p className=\"tl pl3\"><b>work:</b> {work}</p> */}\r\n                <p className=\"tl pl3\"><b>phone: </b>{phone}</p>\r\n                <p className=\"tl pl3\"><b>email: </b>{email}</p>\r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n   \r\n\r\n    return (\r\n        <div className = \"pa4\">\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            age={robots[i].age}\r\n                            work={robots[i].work}\r\n                            phone={robots[i].phone}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return(\r\n        <div className=\"pa3\">\r\n           <input \r\n           className='pa3 br4 ba b--green bg-lightest-blue'\r\n           type = 'search' \r\n           placeholder = 'search friend'\r\n           onChange = {searchChange}\r\n           />\r\n        </div>\r\n    );   \r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport './scroll.css';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div className=\"scroll\" style={{overflowY: 'scroll', height: '500px', scrollbarColor: 'black'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\nrender(){\r\n    if(this.state.hasError){\r\n        <h1>ooops! that is no good...</h1>\r\n    }\r\n    else{\r\n        return this.props.children\r\n    }\r\n}\r\n   \r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React ,{ Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    } \r\n    \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(Response=> Response.json())\r\n            .then(users => this.setState({robots: users}));\r\n      \r\n    }\r\n\r\n   onSearchChange = (event) =>{\r\n       this.setState({ searchField: event.target.value })\r\n   }\r\n\r\n    render(){\r\n        const {robots,searchField} = this.state;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n     return !robots.length ?\r\n       <h1 className='tc pv7' >loding...</h1> :\r\n        (\r\n            <div  className =\"tc\">\r\n                <h1 className =\"f1\">friends</h1>\r\n                <SearchBox searchChange = {this.onSearchChange} /> \r\n                <Scroll> \r\n                    <ErrorBoundryr\n                        <CardList robots = {filterRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n     } \r\n        \r\n       \r\n    \r\n    \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n  <App />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}